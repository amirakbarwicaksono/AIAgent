import tkinter as tk
from tkinter import messagebox
from collections import deque
import copy

# -------------------- LOGIC BFS --------------------
goal_state = [1,2,3,4,5,6,7,8,0]

moves = {
    0:[1,3], 1:[0,2,4], 2:[1,5],
    3:[0,4,6], 4:[1,3,5,7], 5:[2,4,8],
    6:[3,7], 7:[4,6,8], 8:[5,7]
}

def get_neighbors(state):
    neighbors = []
    zero = state.index(0)
    for move in moves[zero]:
        new_state = state[:]
        new_state[zero], new_state[move] = new_state[move], new_state[zero]
        neighbors.append(new_state)
    return neighbors

def bfs(start_state):
    queue = deque([(start_state, [])])
    visited = set([tuple(start_state)])
    while queue:
        state, path = queue.popleft()
        if state == goal_state:
            return path + [state]
        for neighbor in get_neighbors(state):
            t_neighbor = tuple(neighbor)
            if t_neighbor not in visited:
                visited.add(t_neighbor)
                queue.append((neighbor, path + [state]))
    return None

# -------------------- GUI --------------------
class PuzzleApp:
    def __init__(self, root):
        self.root = root
        self.root.title("8 Puzzle with BFS Solve")
        
        # initial puzzle state
        self.state = [1,0,3,
                      4,2,6,
                      7,5,8]

        self.buttons = []
        self.draw_puzzle()

        solve_btn = tk.Button(root, text="Solve (BFS)", command=self.solve)
        solve_btn.grid(row=3, column=0, columnspan=3, sticky="nsew")

    def draw_puzzle(self):
        for btn in self.buttons:
            btn.destroy()
        self.buttons = []
        for i in range(9):
            value = self.state[i]
            text = str(value) if value != 0 else ""
            btn = tk.Button(self.root, text=text, width=6, height=3, font=("Arial", 18))
            btn.grid(row=i//3, column=i%3, sticky="nsew")
            self.buttons.append(btn)

    def solve(self):
        solution = bfs(self.state)
        if not solution:
            messagebox.showinfo("Info", "Tidak ada solusi ditemukan")
            return
        
        self.animate_solution(solution)

    def animate_solution(self, solution):
        def step(i):
            if i < len(solution):
                self.state = solution[i]
                self.draw_puzzle()
                self.root.after(500, step, i+1)  # delay 500ms tiap langkah
        step(0)

# -------------------- MAIN --------------------
if __name__ == "__main__":
    root = tk.Tk()
    app = PuzzleApp(root)
    root.mainloop()
